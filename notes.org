
* Docker
** Build
~docker build --tag jfnl/expert .~
Or, for multi-arch:
~docker buildx build --push --platform linux/amd64,linux/arm64 \
                            --tag jfnl/expert:latest .~
** Upload to Docker Hub
~docker push jfnl/expert~
** Run
Notes:
1. <path-to-bundle> has to be absolute, so it can be convenient to use a path relative to $PWD.
2. Within the container, EXPERt is invoked with the path ~/bundle~, which is mapped to the external bundle directory. So it's currently impossible to start it without a bundle.

~docker run --rm -v <path-to-bundle>:/bundle -p 5000:5000 jfnl/expert [args ...]~

NB: If you want to run on a port other than 5000, use:
~-l 0.0.0.0:new-port-number~
If you just pass the port number, EXPERt will listen on 127.0.0.1, which won't work inside the container.

* Issues
** TODO All slots filled
Went through CM-R in tool mode. All tasks completed and data was saved, but on the 'thank you' page, got 'all participant slots have already been filled' message.
** TODO Repeated profile assignment in tool mode
This can currently happen if you page back over the consent form (if there is one) multiple times.
** DONE Sidebar
CM2 is going to feature a sidebar (which can be shown or hidden) with always-available help. I'd like this to be able to scroll independently from the main task scroll area.
** TODO Caching redux
I think static files (e.g., scripts) can still get cached?
** TODO Simplified state machine
It may be the case that a task has a simple set of states it can toggle between, and that each one is associated with its own particular event, such that if any state receives that event, we always enter the associated state. In such a case, there's hardly any point in having a distinction between events and states, or bothering with a transition table.
Options:
1. If no transition table is defined, event() could simply look up 'sym' directly in the states class.
2. More simply, just use enter() directly, passing in the state function name.
** TODO Async FSA
Currently, FSA state-entry functions are not treated as async. I.e., enter() is not async, and doesn't await any entry function it calls.
** TODO Temporary param setting via command line
It's often useful to limit the number of tasks shown during development. I've been doing this manually, just slicing, e.g., 'testing_tasks', or whatever. But this is annoying because then you've changed the code, and it's easy to mistakenly commit the change. It'd be nice to have a parameter of some type that controls how many tasks are seen, and to be able to temporarily set it via a command-line switch. Where would such variables live, though? params.py? cfg.json? Somewhere new?

Currently, the E server itself only references an experiment's params.py to read 'n_profiles' (although there is a commented-out reference in __init__.py for debug mode). Maybe this should go into cfg.json?
** TODO What bundle contents to upload
A bundle directory may contain any number of extraneous things that EXPERt doesn't need to run the experiment: build files, local git repo, etc. Certain things that are needed are known, such as the src directory. But other necessary data files may be present. It's convenient to allow the user to just select the toplevel bundle folder to upload, but this may include all of the extraneous stuff. Options:
1. Whitelist + manifest: accept (in the browser) only known things (e.g., src/), but allow a manifest file listing additional things to allow. The manifest would need to be read separately in the browser.
   1. Pros: Can keep current bundle file layouts.
   2. Cons: Need to create manifest files.
2. Whitelist only: add an extra directory, e.g., 'data', to hold any extra data files.
   1. Pros: No manifest.
   2. Cons: Need to modify bundle code to handle new file layouts.
Whitelist items:
- cfg.json
- src/
- static/
- templates/
** TODO Large uploads
With the current upload mechanism, the browser literally reads all files in the selected directory, and sends a single, giant POST request to the server containing all the data. This could get unwieldy if one were running an experiment using large, e.g., video or audio files.
** DONE Overwriting profiles and runs
Replacing a bundle directory would also replace any profiles and runs within it. Seems like a good way to accidentally delete important data! Maybe just overwrite files, but explicitly leave profiles and runs alone?
This also implies that it shouldn't be possible to include any local profiles and runs directories in the manifest.
** DONE If the user selects nothing to upload
It doesn't look like there's any way to receive an event if an open file selector window has simply been closed without selecting anything. So it's not a good idea to gray out the upload button, since we can't un-gray it in that case.
** DONE Can the user select a directory they're inside?
And if so, will the uploaded file relative paths still have the directory name prepended?
UPDATE: Yep, it works just fine.
** TODO Mandatory bundle content
Might be a good idea to make sure any to-be-uploaded bundle actually is an EXPERt bundle, i.e., contains 'src', 'templates', etc.
** TODO Remove bundle button
Should just make a 'manage bundles' dialog.
** TODO Rebuild profiles button?
When you replace the contents of a bundle, you may want to create new profiles.
** TODO Show a page when an experiment isn't running
Even when no bundle has been loaded, or one has but no run has been started.
** DONE Protect dangerous API calls
Normal users (i.e., participants) shouldn't be able to make global API calls, generally. However, template loading recently became a global command.
The current global API commands are:
- soundcheck: just compares user input to the soundcheck word
- load_template: renders the specified template, with variables set
- dboard_init: returns global variables, status of all insts, and run info
- get_bundles: returns list of installed bundles
- get_runs: returns list of runs for current bundle
- start_new_run
- delete_id_mappings
- load_exper
- reload_exper
UPDATE: The dashboard now simply uses its authn code as its socketio namespace, making all the API commands it defines secure. I moved the soundcheck command into experiment.py (where it belongs), and added load_template to both experiment.py and the dashboard.
** DONE Dboard is not getting updated when new insts are created
Probably need to emit on the correct namespace.
** TODO Can we upload a bundle that replaces the currently-running one?
