
import { elt, callApi } from '/{{ exp_js }}/util.js'

export class Task {

    constructor(debug) {
        this.debug = debug
        this.prevBtn = elt('exp-prev-btn')
        this.nextBtn = elt('exp-next-btn')
        this.nextBtnWrapper = elt('exp-next-btn-wrapper')
        //this.debugBackBtn = elt('debug-back-btn')
        //this.debugFwdBtn = elt('debug-fwd-btn')
        this.taskCursor = elt('exp-task-cursor')
        this.content = elt('task-wrapper')

        {% if exp_progbar_enabled %}
        elt('exp-progbar').classList.remove('hidden')
        {% endif %}
        //this.reset()

        if ('{{ exp_sid }}' !== 'None' || debug) {
            let ns = debug ? 'debug' : '{{ exp_sid }}'
            this.socket = io(`/${ns}`)
            this.socket.on('connect', async () => {
                console.log("socket connected")
            })
            this.socket.on('disconnect', async () => {
                console.log("socket disconnected")
            })
            this.socket.on('connect_error', async () => {
                console.log("socket connection error")
            })
            this.nextBtn.addEventListener('click', async () => {
                if (this._nextHook) {
                    await this._nextHook()
                }
                this.disableNext()
                await this._nav('next_page', this.response)
            })
            {% if exp_tool_mode %}
            this.prevBtn.addEventListener(
                'click', async () => await this._nav('prev_page'))
            {% endif %}
            //this.debugFwdBtn.addEventListener(
            //    'click', async () => await this._nav('debug_fwd'))
        }
    }

    get nextHook() {
        return this._nextHook
    }

    set nextHook(h) {
        this._nextHook = h
    }

    _updateProgress() {
        const cursor = this.vars['exp_task_cursor']
        const num_tasks = this.vars['exp_num_tasks']
        // The progress bar shows progress in terms of the cursor index
        // of the current task (starting at 1) divided by the
        // total number, so it will show a small value on
        // the first task, and 100% on the final task
        const progress_pct = 100*cursor/num_tasks
        elt('exp-progbar').firstElementChild.style.width = `${progress_pct}%`
        {% if exp_tool_mode %}
        {% if exp_tool_display_total_tasks%}
        this.taskCursor.textContent = `${cursor}/${num_tasks}`
        {% else %}
        this.taskCursor.textContent = cursor
        {% endif %}
        const state = this.vars['exp_state']
        this.prevBtn.disabled =
            state === 'CONSENT_DECLINED' || state === 'TIMED_OUT' || cursor < 2
        this.nextBtn.disabled = state !== 'ACTIVE'
        {% endif %}
    }

    async _nav(...apiParams) {
        let vars = await this.api(...apiParams)
        if (vars['task_type'] === this.vars['task_type']) {
            this.vars = vars
            await this.reset()
            //this.initFunc(this)
        } else {
            // moving on to a new task type
            location.reload()
        }
    }

    async init() {
        //this.initFunc = f
        this.vars = await this.api('init_task')
        await this.reset()
        //f(this)
    }

    async reset() {
        this.guide(null)
        this.response = null
        this.content.scrollTo(0, 0)
        window.scrollTo(0, 0)
        this._updateProgress()
    }

    async api(func, args) {
        return await callApi(this.socket, func, args)
    }

    enableNext() {
        this.nextBtn.disabled = false
        this.guide(this.nextBtn)
    }

    disableNext() {
        {% if not exp_tool_mode %}
        this.nextBtn.disabled = true
        this.guide(null)
        {% endif %}
    }

    setResponse(response) {
        this.response = response
    }

    guide(guideElt) {
        if (this.guideElt) {
            this.guideElt.classList.remove('guide')
        }
        if (guideElt) {
            guideElt.classList.add('guide')
        }
        this.guideElt = guideElt
    }

    // Pre-load a sound
    loadSound(sound) {
        return new Audio(
            `/{{ exp_url_prefix }}/{{ exp_exper }}/audio/${sound}.mp3`)
    }
}

export class FSA {
    constructor(states) {
        this.states = states
        this.states.fsa = this
        this.state = null
    }

    event(sym) {
        const transits = this.states.transits[this.state]
        if (transits === undefined) {
            return
        }
        const destState = transits[sym]
        // symbols without transitions are treated as loops
        if (destState !== undefined) {
            this.enter(destState)
        }
    }

    enter(state) {
        this.state = state
        let f = this.states[state]
        if (f !== undefined) {
            f.apply(this.states)
        }
    }
}
