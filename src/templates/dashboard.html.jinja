{% extends "layout.html.jinja" %}

{% block script %}
    <script src="https://cdn.socket.io/3.1.1/socket.io.min.js"
            integrity="sha384-gDaozqUvc4HTgo8iZjwth73C6dDDeOJsAgpxBcMpZYztUfjHXpzrpdrHRdVp8ySO"
            crossorigin="anonymous"></script>
    <script type="module">
     //document.getElementById('task-content').scrollTo(0, 0)
     window.scrollTo(0, 0)
    </script>

    <script type="module">

     import { Dialog } from '/{{ exp_js }}/dialog.js'
     import { elt, callApi } from '/{{ exp_js }}/util.js'

     class DownloadDialog extends Dialog {

         constructor() {
             super('exp-dlg-download')
             this.titlebar = 'Download Results'
             this.selectNode = this.node.querySelector(
                 '.exp-dlg-download-select')
         }

         async show() {
             this.run = null
             this.selectNode.selectedIndex = 0
             const runs = await callApi(socket, 'get_runs')
             this.selectNode.add(new Option('Select a run'))
             for (const run of runs) {
                 this.selectNode.add(new Option(run))
             }
             const selectionChanged = () => {
                 this.run = this.selectNode.selectedIndex ?
                            this.selectNode.value : null
                 this.setButtonsDisabled({okay: !this.run})
             }
             this.selectNode.addEventListener('change', selectionChanged)
             this.setButtons([{tag: 'cancel', text: 'Cancel'},
                              {tag: 'okay', text: 'Download', disabled: true}])
             let tag = await super.show(() => this.buttons['okay'][0].focus())
             this.selectNode.removeEventListener('change', selectionChanged)
             return tag === 'okay'
         }
     }

     const exper = "{{ exp_exper }}";

     const instDataNode = elt('inst-data');

     const cellClasses = [
         'dboard-num', 'dboard-id', 'dboard-clientip', 'dboard-profile',
         'dboard-state', 'dboard-task', 'dboard-started',
         'dboard-elapsed'];
     const numCols = cellClasses.length;

     let numRows = 0;

     function updateList(instances) {
         const numInsts = instDataNode.childElementCount/numCols;
         const diff = instances.length - numInsts;
         if (diff > 0) {
             for (let i = 0; i < diff; i++) {
                 for (let j = 0; j < numCols; j++) {
                     instDataNode.append(document.createElement('div'));
                 }
             }
         }
         for (let i = 0; i < instances.length; i++) {
             // skip header divs
             const numDiv = instDataNode.children[i*numCols];
             numDiv.innerHTML = i + 1;
             numDiv.className = cellClasses[0] + ' ' + 'dboard-item';
             for (let j = 1; j < numCols; j++) {
                 const div = instDataNode.children[i*numCols + j];
                 div.innerHTML = instances[i][j - 1]
                 div.className = cellClasses[j] + ' ' + 'dboard-item'
             }
         }
     }

     function addRow(fields) {
         //console.log('subjids.childNodes', subjids.childNodes);
         const numDiv = document.createElement('div');
         instDataNode.appendChild(numDiv);
         numDiv.innerHTML = ++numRows;
         numDiv.className = cellClasses[0] + ' ' + 'dboard-item';
         for (let j = 1; j < numCols; j++) {
             const div = document.createElement('div');
             instDataNode.appendChild(div);
             div.innerHTML = fields[j - 1];
             div.className = cellClasses[j] + ' ' + 'dboard-item';
         }
     }

     function updateInstance(instance) {
         const numInsts = instDataNode.childElementCount/numCols;
         for (let i = 0; i < numInsts; i++) {
             // NB: Element.children only includes Element nodes
             const subjid = instDataNode.children[i*numCols + 1].innerHTML;
             if (subjid === instance[0]) {
                 for (let j = 2; j < numCols; j++) {
                     instDataNode.children[i*numCols + j].innerHTML =
                         instance[j - 1];
                 }
                 break;
             }
         }
     }

     function download(run) {
         const anchor = document.createElement('a');
         anchor.href = `{{ dashboard_path }}/download/${run}`;
         anchor.download = run;
         anchor.style.display = 'none';
         document.body.appendChild(anchor);
         anchor.click();
         document.body.removeChild(anchor);
     }

     function setRunInfo(info) {
         const runInfo = elt('run-info');
         runInfo.textContent = info.run;
         if (info.mode === 'res') {
             runInfo.textContent += ' res';
         } else if (info.mode === 'rep') {
             runInfo.textContent += ' rep ' + info.target;
         }
     }

     const downloadDlg = new DownloadDialog()
     const downloadBtn = elt('download-btn')
     const newRunBtn = elt('new-run-btn')

     const socket = io()

     socket.on('connect', async () => {
         console.log("socket connected");
         const data = await callApi(socket, 'dboard_init');
         updateList(data.insts);
         setRunInfo(data.runInfo);
         downloadBtn.addEventListener('click', async () => {
             if (await downloadDlg.show()) {
                 download(downloadDlg.run);
             }
         });
         newRunBtn.addEventListener('click', async () => {
             newRunBtn.disabled = true;
             const runInfo = await callApi(socket, 'start_new_run');
             setRunInfo(runInfo);
             // XXX add marker in table to indicate new run
             newRunBtn.disabled = false;
         });
     });

     socket.on('new_instance', (instance) => addRow(instance))
     socket.on('update_instance', (instance) => updateInstance(instance))

     /*const dummy = [
         '0123456789abcdef0123456789abcdef',
         'xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx',
         'foobar',
         'CONSENT_DECLINED',
         '999',
         '01/01/1970 00:00:00',
         '100.5'
     ];
     for (let i = 0; i < 50; i++)
         addRow(dummy);*/

    </script>
{% endblock %}

{% block page_content %}
    <div id="dboard">

        <h2>Dashboard [<span id="run-info"></span>]</h2>

        <div id="controls">
            <button type="button" id="download-btn">
                Download Results
            </button>
            <button type="button" id="new-run-btn">
                Start New Run
            </button>
        </div>

        <div id="inst-list-header-bar">
            {% set headers = [
                '', 'ID', 'Client IP', 'Profile', 'State',
                'Task', 'Started', 'Elapsed (m)'
            ] %}
            <div id="inst-list-headers">
                {% for header in headers -%}
                    <div class="dboard-header">{{ header }}</div>
                {%- endfor %}
            </div>
        </div>
        <div id="inst-list">
            <div id="inst-data"></div>
        </div>
    </div>
    {% set exp_dlg_id = 'download' %}
    {% include 'download_dialog.html.jinja' %}
{% endblock %}
