{% extends "layout.html.jinja" %}

{% block script %}
    <script src="https://cdn.socket.io/3.1.1/socket.io.min.js"
            integrity="sha384-gDaozqUvc4HTgo8iZjwth73C6dDDeOJsAgpxBcMpZYztUfjHXpzrpdrHRdVp8ySO"
            crossorigin="anonymous"></script>
    <script type="module">
     //document.getElementById('task-content').scrollTo(0, 0)
     window.scrollTo(0, 0)
    </script>

    <script type="module">

     import { Dialog } from '/{{ exp_js }}/dialog.js'
     import { elt, callApi } from '/{{ exp_js }}/util.js'

     class DownloadDialog extends Dialog {

         constructor() {
             super('exp-dlg-download')
             this.titlebar = 'Download Results'
             this.selectNode = this.node.querySelector(
                 '.exp-dlg-download-select')
         }

         async show() {
             this.run = null
             this.selectNode.selectedIndex = 0
             const runs = await callApi(socket, 'get_runs')
             this.selectNode.add(new Option('Select a run'))
             for (const run of runs) {
                 this.selectNode.add(new Option(run))
             }
             const selectionChanged = () => {
                 this.run = this.selectNode.selectedIndex ?
                            this.selectNode.value : null
                 this.setButtonsDisabled({okay: !this.run})
             }
             this.selectNode.addEventListener('change', selectionChanged)
             this.setButtons([{tag: 'cancel', text: 'Cancel'},
                              {tag: 'okay', text: 'Download', disabled: true}])
             let tag = await super.show(() => this.buttons['okay'][0].focus())
             this.selectNode.removeEventListener('change', selectionChanged)
             return tag === 'okay'
         }
     }

     const exper = "{{ exp_exper }}";

     const subjids = elt('exp-dboard-subjids');

     const cellClasses = [
         'dboard-num', 'dboard-id', 'dboard-clientip', 'dboard-profile',
         'dboard-state', 'dboard-comp', 'dboard-started',
         'dboard-elapsed'];
     const numCols = cellClasses.length;

     let numRows = 0;

     function updateList(instances) {
         // let numFields = instances.length? instances[0].length : 1
         // subtract header divs
         let numInsts = (subjids.childNodes.length - numCols)/numCols
         let diff = instances.length - numInsts
         if (diff > 0) {
             for (let i = 0; i < diff; i++)
                 for (let j = 0; j < numCols; j++)
                     subjids.appendChild(document.createElement('div'))
         }
         for (let i = 0; i < instances.length; i++) {
             // skip header divs
             let numDiv = subjids.childNodes[numCols + i*numCols]
             numDiv.innerHTML = i + 1
             numDiv.className = cellClasses[0] + ' ' + 'dboard-item'
             for (let j = 1; j < numCols; j++) {
                 let div = subjids.childNodes[numCols + i*numCols + j]
                 div.innerHTML = instances[i][j - 1]
                 div.className = cellClasses[j] + ' ' + 'dboard-item'
             }
         }
     }

     function addRow(fields) {
         // index of new row (subtract header divs)
         console.log('numCols', numCols);
         //const oldNumRows = (subjids.childNodes.length - numCols)/numCols;
         //console.log('oldNumRows', oldNumRows);
         console.log('subjids.childNodes', subjids.childNodes);
         const numDiv = document.createElement('div');
         subjids.appendChild(numDiv);
         //const numDiv = subjids.childNodes[numCols + oldNumRows*numCols];
         //numDiv.innerHTML = oldNumRows + 1;
         numDiv.innerHTML = ++numRows;
         numDiv.className = cellClasses[0] + ' ' + 'exp-dboard-item';
         for (let j = 1; j < numCols; j++) {
             const div = document.createElement('div');
             subjids.appendChild(div);
             //const div = subjids.childNodes[numCols + oldNumRows*numCols + j];
             div.innerHTML = fields[j - 1];
             div.className = cellClasses[j] + ' ' + 'exp-dboard-item';
         }
     }

     /*function addInstance(instance) {
        // let numFields = instance.length
        // index of new instance (subtract header divs)
        let oldNumInsts = (subjids.childNodes.length - numCols)/numCols
        subjids.appendChild(document.createElement('div'))
        let numDiv = subjids.childNodes[numCols + oldNumInsts*numCols]
        numDiv.innerHTML = oldNumInsts + 1
        numDiv.className = cellClasses[0] + ' ' + 'dboard-item'
        for (let j = 1; j < numCols; j++) {
        subjids.appendChild(document.createElement('div'))
        let div = subjids.childNodes[numCols + oldNumInsts*numCols + j]
        div.innerHTML = instance[j - 1]
        div.className = cellClasses[j] + ' ' + 'dboard-item'
        }
        }*/

     function updateInstance(instance) {
         let numInsts = (subjids.childNodes.length - numCols)/numCols
         for (let i = 0; i < numInsts; i++) {
             let subjid = subjids.childNodes[numCols + i*numCols + 1].innerHTML
             if (subjid === instance[0]) {
                 for (let j = 2; j < numCols; j++) {
                     subjids.childNodes[numCols + i*numCols + j].innerHTML =
                         instance[j - 1]
                 }
                 break
             }
         }
     }

     function download(run) {
         const anchor = document.createElement('a')
         anchor.href = `{{ exp_dashboard_path }}/download/${run}`
         anchor.download = run
         anchor.style.display = 'none'
         document.body.appendChild(anchor)
         anchor.click()
         document.body.removeChild(anchor)
     }

     const downloadDlg = new DownloadDialog()
     const downloadBtn = elt('exp-download-btn')

     const socket = io()

     socket.on('connect', async () => {
         console.log("socket connected")
         const insts = await callApi(socket, 'get_instances')
         updateList(insts)
         downloadBtn.addEventListener(
             'click', async () => {
                 if (await downloadDlg.show()) {
                     download(downloadDlg.run)
                 }
         })
     })

     socket.on('new_instance', (instance) => addRow(instance))
     socket.on('update_instance', (instance) => updateInstance(instance))

     /*const dummy = [
         '0123456789abcdef0123456789abcdef',
         'xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx',
         'foobar',
         'CONSENT_DECLINED',
         '999',
         '01/01/1970 00:00:00',
         '100.5'
     ];
     addRow(dummy);*/

    </script>
{% endblock %}

{% block page_content %}
    <div id="exp-dboard">

        {% if exp_mode == 'new' %}
            {% set run_info = exp_run %}
        {% elif exp_mode == 'res' %}
            {% set run_info = exp_run + ' res' %}
        {% else %}
            {% set run_info = exp_run + ' rep ' + exp_target %}
        {% endif %}
        <h2>Dashboard [{{ run_info }}]</h2>

        <button type="button" id="exp-download-btn">
            Download Results
        </button>

        <div id="dboard-wrapper">
            {% set headers = [
                '', 'ID', 'Client IP', 'Profile', 'State',
                'Tasks', 'Started', 'Elapsed (m)'
            ] %}
            <div id="exp-dboard-subjids">
                {% for header in headers -%}
                    <div class="exp-dboard-header">{{ header }}</div>
                {%- endfor %}
            </div>
        </div>
    </div>
    {% set exp_dlg_id = 'download' %}
    {% include 'download_dialog.html.jinja' %}
{% endblock %}
