{% extends "layout.html.jinja" %}

{% block script %}
    <script src="https://cdn.socket.io/3.1.1/socket.io.min.js"
            integrity="sha384-gDaozqUvc4HTgo8iZjwth73C6dDDeOJsAgpxBcMpZYztUfjHXpzrpdrHRdVp8ySO"
            crossorigin="anonymous"></script>
    <script type="module">
     //document.getElementById('task-content').scrollTo(0, 0)
     window.scrollTo(0, 0)
    </script>

    <script type="module">

     import { Dialog, ConfirmDialog } from '/{{ exp_js }}/dialog.js';
     import { elt, callApi } from '/{{ exp_js }}/util.js';

     class RunsDialog extends Dialog {

         constructor(ctrlr) {
             super('exp-dlg-download');
             this.ctrlr = ctrlr;
             this.selectNode = this.node.querySelector(
                 '.exp-dlg-download-select');
         }

         clearOptions() {
             while (this.selectNode.options.length) {
                 this.selectNode.remove(0);
             }
         }

         async show(title, btnText, includeCurrent=true, onlyHasPii=false) {
             this.titlebar = title;
             this.run = null;
             this.selectNode.selectedIndex = 0;
             {# obj with keys:
             'id', 'num_complete', 'num_incomplete', 'has_pii'
             #}
             const runs = await callApi(this.ctrlr.socket, 'get_runs');
             this.clearOptions();
             this.selectNode.add(new Option('Select a run'));
             for (const run of runs) {
                 if ((run.id === this.ctrlr.run && !includeCurrent) ||
                     (!run.has_pii && onlyHasPii)) {
                     continue;
                 }
                 const txt =
                     `${run.id} (${run.num_complete}, ${run.num_incomplete})`;
                 this.selectNode.add(new Option(txt));
             }
             const selectionChanged = () => {
                 this.run = null;
                 if (this.selectNode.selectedIndex) {
                     const len = this.selectNode.value.split(' ')[0].length;
                     this.run = this.selectNode.value.slice(0, len);
                 }
                 this.setButtonsDisabled({okay: !this.run});
             }
             this.selectNode.addEventListener('change', selectionChanged);
             this.setButtons(
                 [{tag: 'cancel', text: 'Cancel'},
                  {tag: 'okay', text: btnText, disabled: true}]);
             let tag = await super.show(() => this.buttons['okay'][0].focus());
             this.selectNode.removeEventListener('change', selectionChanged);
             return tag === 'okay';
         }
     }

     class InstList {

         constructor() {
             this.instDataNode = elt('inst-data');
             this.cellClasses = [
                 'dboard-num', 'dboard-id', 'dboard-clientip',
                 'dboard-profile', 'dboard-state', 'dboard-task',
                 'dboard-started', 'dboard-elapsed'];
             this.numRows = 0;
             this.numCols = this.cellClasses.length;
         }

         newRow(subjid) {
             const divs = [];
             for (let i = 0; i < this.numCols; i++) {
                 divs.push(document.createElement('div'));
                 this.instDataNode.append(divs[i]);
                 divs[i].classList.add(this.cellClasses[i], 'dboard-item');
             }
             divs[0].innerHTML = ++this.numRows;
             divs[1].dataset.subjid = subjid;
             return divs;
         }

         getRow(subjid) {
             const subjidDiv = this.instDataNode.querySelector(
                 `div[data-subjid="${subjid}"]`);
             if (subjidDiv) {
                 const divs = [subjidDiv];
                 for (let i=2; i<this.numCols; i++) {
                     divs.push(divs.at(-1).nextElementSibling);
                 }
                 return divs;
             }
         }

         setRow(subjid, fields, start=0, end=null) {
             // NB: if end is set, it must be non-negative
             if (end === null) {
                 end = this.numCols - 1;
             }
             const divs = this.getRow(subjid);
             for (let i=start; i<end; i++) {
                 divs[i].innerHTML = fields[i - start];
             }
         }

         addInst(inst) {
             this.newRow(inst[0]);
             this.setRow(inst[0], inst);
         }

         addStopSeparator(run) {
             const div = document.createElement('div');
             div.className = 'dboard-stop-sep';
             div.textContent = `Run ${run} stopped early`;
             this.instDataNode.append(div);
         }

         addEndSeparator(run) {
             const div = document.createElement('div');
             div.className = 'dboard-end-sep';
             div.textContent = `Run ${run} complete`;
             this.instDataNode.append(div);
         }

         updateInst(inst) {
             this.setRow(inst[0], inst);
         }

         update(insts) {
             for (let i = this.numRows; i < insts.length; i++) {
                 this.newRow(insts[i][0]);
             }
             for (let i = 0; i < insts.length; i++) {
                 this.updateInst(insts[i]);
             }
         }

     }

     const exper = "{{ exp_exper }}";

     class Controller {

         constructor() {
             this.downloadBtn = elt('download-btn');
             //this.deleteBtn = elt('delete-btn');
             this.downloadIdBtn = elt('download-id-btn');
             this.deleteIdBtn = elt('delete-id-btn');
             this.newRunBtn = elt('new-run-btn');
             this.runsDlg = new RunsDialog(this);
             this.confirmDlg = new ConfirmDialog(this);
             this.instList = new InstList();

             this.downloadBtn.addEventListener('click', async () => {
                 this.downloadBtn.disabled = true;
                 if (await this.runsDlg.show(
                     'Download Results', 'Download')) {
                     this.download(this.runsDlg.run, 'results');
                 }
                 this.downloadBtn.disabled = false;
             });
             /*this.deleteBtn.addEventListener('click', async () => {
                 this.deleteBtn.disabled = true;
                 if (await this.runsDlg.show(
                     'Delete Results', 'Delete', false) &&
                     await this.confirmDlg.show(
                         `Really delete results for run ${this.runsDlg.run}?`,
                         'Cancel', 'Delete')) {
                     await callApi(
                         this.socket, 'delete_runs', [this.runsDlg.run]);
                 }
                 this.deleteBtn.disabled = false;
             });*/
             this.downloadIdBtn.addEventListener('click', async () => {
                 this.downloadIdBtn.disabled = true;
                 if (await this.runsDlg.show(
                     'Download ID Mapping', 'Download', true, true)) {
                     this.download(this.runsDlg.run, 'id_mapping');
                 }
                 this.downloadIdBtn.disabled = false;
             });
             this.deleteIdBtn.addEventListener('click', async () => {
                 this.deleteIdBtn.disabled = true;
                 if (await this.runsDlg.show(
                     'Delete ID Mapping', 'Delete', false, true) &&
                     await this.confirmDlg.show(
                         `Really delete ID mapping for run ${this.runsDlg.run}?`,
                         'Cancel', 'Delete')) {
                     await callApi(
                         this.socket, 'delete_id_mappings', this.runsDlg.run);
                 }
                 this.deleteIdBtn.disabled = false;
             });
             this.newRunBtn.addEventListener('click', async () => {
                 if (await this.confirmDlg.show(
                     'Really start a new run?', 'Cancel', 'Start')) {
                     this.newRunBtn.disabled = true;
                     const runInfo = await callApi(
                         this.socket, 'start_new_run');
                     if (this.run) {
                         this.instList.addStopSeparator(this.run);
                     }
                     this.setRunInfo(runInfo);
                     this.run = runInfo.run;
                     this.newRunBtn.disabled = false;
                 }
             });

             this.socket = io();

             this.socket.on('connect', async () => {
                 console.log("socket connected");
                 const data = await callApi(this.socket, 'dboard_init');
                 this.instList.update(data.insts);
                 this.setRunInfo(data.runInfo);
                 this.run = data.runInfo.run;
             });

             this.socket.on('new_instance',
                            inst => this.instList.addInst(inst));
             this.socket.on('update_instance',
                            inst => this.instList.updateInst(inst));
             this.socket.on('run_complete', () => {
                 this.instList.addEndSeparator(this.run);
                 this.setRunInfo({run: 'not running'});
                 this.run = null;
             });
         }

         download(run, what) {
             const anchor = document.createElement('a');
             anchor.href = `{{ dashboard_path }}/download/${run}/${what}`;
             anchor.download = run;
             anchor.style.display = 'none';
             document.body.append(anchor);
             anchor.click();
             document.body.removeChild(anchor);
         }

         setRunInfo(info) {
             const runInfo = elt('run-info');
             runInfo.textContent = info.run;
             if (info.mode === 'res') {
                 runInfo.textContent += ' res';
             } else if (info.mode === 'rep') {
                 runInfo.textContent += ' rep ' + info.target;
             }
         }

     }

     const ctrlr = new Controller();

     /*const dummy = [
         '0123456789abcdef0123456789abcdef',
         'xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx',
         'foobar',
         'CONSENT_DECLINED',
         '999',
         '01/01/1970 00:00:00',
         '100.5'
     ];
     for (let i = 0; i < 50; i++)
         addRow(dummy);*/

    </script>
{% endblock %}

{% block page_content %}
    <div id="dboard">

        <h2>Dashboard</h2>
        <div>
            <strong>{{ exp_exper }} ({{ num_profiles }} profiles);
                run <span id="run-info"></span></strong>
        </div>
        <div id="controls">
            <button type="button" id="download-btn">
                Download Results
            </button>
            {#<button type="button" id="delete-btn">
                Delete Results
            </button>#}
            <button type="button" id="download-id-btn">
                Download ID Mapping
            </button>
            <button type="button" id="delete-id-btn">
                Delete ID Mapping
            </button>
            <button type="button" id="new-run-btn">
                Start New Run
            </button>
        </div>

        <div id="inst-list-header-bar">
            {% set headers = [
                '', 'ID', 'Client IP', 'Profile', 'State',
                'Task', 'Started', 'Elapsed (m)'
            ] %}
            <div id="inst-list-headers">
                {% for header in headers -%}
                    <div class="dboard-header">{{ header }}</div>
                {%- endfor %}
            </div>
        </div>
        <div id="inst-list">
            <div id="inst-data"></div>
        </div>
    </div>
    {% set exp_dlg_id = 'download' %}
    {% include 'download_dialog.html.jinja' %}
    {% set exp_dlg_id = 'confirm' %}
    {% include 'confirm_dialog.html.jinja' %}
{% endblock %}
